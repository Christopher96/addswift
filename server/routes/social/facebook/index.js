/*
 * Facebook routes for generating Oauth token, fetching data and creating new users and accounts
 */

const router = require('express').Router()
const { signToken } = require('middleware/jwt')
const { FB, FacebookApiException } = require('fb')

// Defining required models
const User = require('models/User')
const Vendor = require('models/Vendor')
const Account = require('models/Account')

// Defines the redirect URI for exchanging authentication code
let redirectUri = (process.env.BASE_URI || 'http://localhost:8080') + '/social/facebook'

// Set the options from Facebook for Developers app
FB.options({
    appId: '1441079792571218',
    appSecret: 'fecfb60fa8c53ab6eddb682246cb9a91',
    redirectUri,
})

// Gets the URL for the authentication popup for required permission scope
router.get('/login-url', (req, res) => {
    const url = FB.getLoginUrl({
        scope: 'email,user_likes'
    })
    if (!url) res.sendStatus(500)

    return res.status(200).json({ url })
})

let access_token = null

// Exhanges the code generated by the popup for a authentication token
getToken = (req, res, next) => {
    FB.api('oauth/access_token', {
        client_id: FB.options('appId'),
        client_secret: FB.options('appSecret'),
        redirect_uri: FB.options('redirectUri'),
        code: req.body.code,
    }, function(data) {
        if (!data || data.error) {
            return res.status(400).send(!data ? 'error occurred' : data.error)
        }
        // Set the oauth token generated from the code
        access_token = data.access_token
        console.log("token", access_token)
        next()
    })
}

// Start fetching data from user with token
fetchData = (path, options) => (req, res, next) => {
    if (req.pass)
        return next()

    if (!options) options = {}
    options.access_token = access_token

    // FB plugin autogenrates appsecret proof, but it bugs out (needs fix)
    delete options.appsecret_proof

    FB.api(path, options, function(data) {
        if (data.error) {
            return res.status(400).send(!data ? 'error occurred' : data.error)
        } else {
            // Append data to object, if it doesn't exist create new property
            if (!req.data) req.data = {}
            if (!req.data[path]) req.data[path] = {}
            req.data[path] = {
                ...req.data[path],
                ...data
            }
            next()
        }
    })
}

// Check if a user is registered with the facebook account
checkUser = (req, res, next) => {
    if (req.data['/me'].id) {
        const username = "facebook." + req.data['/me'].id
        User.findOne({ username }, (err, user) => {
            if (!err && user) {
                req.pass = true
                req.user = user
            }
            req.data.username = username

            return next()
        })
    } else {
        res.sendStatus(500)
    }
}

// Find the facebook Vendor from database
findVendor = (req, res, next) => {
    Vendor.findOne({ site: 'facebook' }, (err, doc) => {
        if (!err && doc) {
            req.data.vendor = doc
            return next()
        }
        console.log("No vendor found")
    })
}

// Create a new user with the fetched facebook data
createUser = (req, res, next) => {
    if (req.pass)
        return next()


    const data = req.data

    // Creates a new Facebook account for the user
    const account = new Account({
        vendor: data.vendor._id,
        data: {
            link: data['/me'].link,
            picture: data['/me/picture'].data.url,
            name: data['/me'].name
        }
    })

    // Creates the user with the created account
    const user = new User({
        isSocial: true,
        username: data.username,
        accessToken: access_token,
        picture: data['/me/picture'].data.url,
        data: {
            email: data['/me'].email,
            name: data['/me'].name
        },
        accounts: [account]
    })

    const cover = data['/me'].cover
    if (cover) {
        user.cover = cover.source
    }

    // Saves the user to the database
    user.save()
        .then(user => {
            req.user = user
            next()
        })
        .catch((err) => {
            console.log(err)
            res.status(500).send(err)
        })
}

// Middleware for registering or logging in a User
// Proceeds to signToken if checkUser find an already registered user
const registerMiddleware = [
    getToken,
    fetchData('/me', {
        "fields": 'id'
    }),
    checkUser,
    findVendor,
    fetchData('/me/picture', {
        "type": 'large',
        "redirect": false
    }),
    fetchData('/me', {
        "fields": 'link,name,cover,address,email'
    }),
    createUser,
    signToken
]

// Defines the register route with above middleware
router.use('/register', registerMiddleware)

module.exports = router